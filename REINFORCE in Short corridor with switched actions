import numpy as np
from matplotlib import pyplot as pl
S=np.arange(3)
SV=np.zeros(3)
a=[1,2]#1 mean left,2 mean right
x_left=np.array([0,1]).reshape([2,1])
x_right=np.array([1,0]).reshape([2,1])
ALPHA=[2**(-13),2**(-14),2**(-12) ] #注意‘^’在python中是二进制异或运算
theta = np.array([0, 4]).reshape([2, 1])
def Translate(s,a):
    if s==0:
        if a==1:
            return 0,-1
        else:
            return 1,-1
    elif s==1:
        if a==1:
            return 2,-1
        else:
            return 0,-1
    else:
        if a==1:
            return 1,-1
        else:
            return 3,-1


def Pi(a,s,theta):
    if a==1:
        return np.exp(np.dot(theta.T,x_left))/(np.exp(np.dot(theta.T,x_left))+np.exp(np.dot(theta.T,x_right)))
    else:
        return np.exp(np.dot(theta.T, x_right)) / (np.exp(np.dot(theta.T, x_left)) + np.exp(np.dot(theta.T, x_right)))


def Generate_ep():
    trace=[0]
    A=[]
    s=0
    G=[]
    print('theta', theta)
    left = Pi(a[0], s, theta)
    right = Pi(a[1], s, theta)
    right = right[0, 0]
    print('right:', right)
    while 1:
        N_e=np.random.binomial(1,right)
        if N_e==1:
            s_,r=Translate(s,a[1])
            A.append(a[1])
        else:
            s_,r=Translate(s,a[0])
            A.append(a[0])
        G.append(-1)
        trace.append(s_)
        if s_==3:
            break
        else:
            s=s_
    print('A:', A)
    print('trace', trace)
    return G,trace,A

def train(alpha):
    global theta
    right_P1 = np.zeros(1000)
    V01 =np.zeros(1000)
    G01 = np.zeros(1000)
    for m in range(100):
        right_P = []
        V0 = []
        G0 = []
        theta = np.array([0, 2]).reshape([2, 1])
        for i in range(1000):
            print("i=", i)
            G,trace,A=Generate_ep()
            G0.append(sum(G))
            k=0
            for j in trace:
                if j==3:
                    break
                g=sum(G[k:])
                if A[k]==1:
                    print('A[k]==1')
                    print('原theta：', theta)
                    print('{},概率：{}'.format(a[0],Pi(a[0],j,theta)[0,0]))
                    print('{},概率：{}'.format(a[1], Pi(a[1], j, theta)[0, 0]))
                    print('g=',g)
                    print('alpha:',alpha)
                    theta=theta+alpha*g*(x_left-(Pi(a[0],j,theta)[0,0]*x_left+Pi(a[1],j,theta)[0,0]*x_right))

                else:
                    print('A[k]==2')
                    print('原theta：', theta)
                    print('{},概率：{}'.format(a[0], Pi(a[0], j, theta)[0, 0]))
                    print('{},概率：{}'.format(a[1], Pi(a[1], j, theta)[0, 0]))
                    print('g=', g)
                    print('alpha:', alpha)
                    theta = theta + alpha * g * (x_right - (Pi(a[0], j, theta)[0,0] * x_left + Pi(a[1], j, theta)[0,0] * x_right))

                k+=1
                print('后theta：',theta)
            right_p = Pi(a[1], 0, theta)
            right_p = right_p[0, 0]
            V_0 = 2 * (right_p - 2) / (right_p * (1 - right_p))
            right_P.append(right_p)
            V0.append(V_0)
        right_P1=right_P1+np.array(right_P)
        V01=V01+np.array(V0)
        G01=G01+np.array(G0)
    right_P1=right_P1/100
    V01=V01/100
    G01=G01/100
    return right_P1,V01,G01

for alpha in ALPHA:
    right_P1,V01,G01=train(alpha)
    if alpha==2**(-13):
        pl.plot(V01,'r')
    elif alpha==2**(-14):
        pl.plot(V01,'g')
    else:
        pl.plot(V01,'y')
pl.axis([0,1000,-40,-10])
pl.show()
